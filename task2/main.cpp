#include <iostream>
#include <fstream>
#include <string>

class Image{
    int mx;
    int my;
    int * buf;

    public:
    Image(){
    }
    Image(int tmx, int tmy):mx(tmx), my(tmy){
        buf = new int[mx*my]();
    }
    Image(char* file_name){
        read_pgm(file_name);
    }
    Image(Image &img){
        if (img.mx){
            mx = img.mx;
            my = img.my;
            for(int y=0; y<my; y++){
                for(int x=0; x<mx; x++){
                    buf[y*my + x] = img.buf[y*my + x];
                }
            }
        }
    }
    virtual ~Image(){
        delete []buf;
    }
    void read_pgm(char* file_name){
        std::ifstream file(file_name);
        std::string s;
        int b;
        file >> s;
        file >> mx >> my >> b;
        
        delete []buf;
        buf = new int[mx*my]();
        int count = 0;
        for(file>>b; !file.eof(); file>>b){
            buf[count] = b;
            count++;
        }
        file.close();
    }
    void write_pgn(char* file_name){
        std::ofstream file(file_name);
        file<<"P2\n" << mx << " " << my << "\n255";
        for(int y=0; y<my; y++){
            file<<"\n";
            for(int x=0; x<mx; x++){
                file<< buf[y*my + x] << " ";
            }
        }
        file.close();
    }
    void set(int x, int y,int color){
        if(x<mx && y<my && color<256 && x>-1 && y>-1 && color>-1){
            buf[y*my + x] = color;
        }
        else{
            std::cout<<"\nCoordinate or color out of range";
            throw 1;
        }
    }
    int get(int x, int y){
        if(x<mx && y<my && x>-1 && y>-1){
            return buf[y*my + x];
        }
        else{
            std::cout<<"\nCoordinate out of range";
            throw 1;
        }
    }
    void show(){
        for(int y=0; y<my; y++){
            for(int x=0; x<mx; x++){
                std::cout<<"\033[48;2;"<<buf[y*my + x]<<";"<<buf[y*my + x]<<";"<<buf[y*my + x]<<"m \033[0m";
            }
            std::cout<<"\n";
        }
    }
};

int main(){

    int mas1[1600] = {101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 1, 6, 15, 53, 53, 53, 53, 5, 15, 1, 15, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 3, 15, 53, 39, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 15, 3, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 15, 15, 53, 1, 1, 0, 1, 15, 6, 6, 6, 6, 15, 1, 0, 1, 1, 1, 15, 3, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 1, 53, 1, 1, 2, 6, 3, 15, 101, 101, 101, 101, 101, 101, 15, 3, 6, 1, 1, 1, 2, 1, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
                        101, 101, 101, 101, 101, 101, 101, 101, 0, 39, 1, 2, 6, 3, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 3, 6, 2, 1, 0, 6, 101, 101, 101, 101, 101, 101, 101, 
                        101, 101, 101, 101, 101, 101, 101, 101, 0, 39, 1, 1, 1, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 3, 1, 1, 1, 6, 101, 101, 101, 101, 
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 1, 39, 1, 1, 3, 101, 101, 101, 3, 1, 101, 101, 101, 101, 101, 101, 101, 101, 1, 1, 101, 101, 101, 3, 5, 1, 0, 1, 101, 101, 101,
                        101, 101, 101, 101, 101, 101, 101, 101, 3, 2, 1, 1, 3, 101, 101, 101, 1, 39, 1, 6, 101, 101, 101, 101, 101, 101, 0, 39, 0, 0, 101, 101, 101, 3, 1, 1, 2, 3, 101, 101, 101, 101,
                        101, 101, 101, 101, 101, 101, 15, 1, 2, 1, 101, 101, 101, 101, 5, 1, 1, 2, 15, 101, 101, 101, 101, 101, 2, 1, 1, 1, 101, 101, 101, 101, 3, 2, 1, 5, 101, 101, 101, 101, 101, 101, 
                        101, 101, 101, 3, 0, 1, 6, 101, 101, 101, 101, 15, 0, 1, 1, 1, 1, 101, 101, 101, 101, 3, 1, 1, 1, 0, 3, 101, 101, 101, 101, 0, 1, 1, 1, 101, 101, 101, 101, 101, 101, 101, 101, 15, 
                        1, 1, 3, 101, 101, 101, 101, 3, 1, 1, 1, 1, 0, 101, 101, 101, 101, 1, 1, 1, 1, 1, 1, 101, 101, 101, 101, 101, 1, 1, 5, 101, 101, 101, 101, 101, 101, 101, 15, 0, 1, 6, 101, 101, 101,
                        101, 101, 3, 1, 1, 1, 1, 6, 101, 101, 101, 101, 1, 1, 1, 1, 1, 1, 101, 101, 101, 101, 101, 0, 1, 0, 3, 101, 101, 101, 101, 101, 101, 1, 1, 0, 3, 101, 101, 101, 101, 101, 3, 1, 1, 1, 
                        1, 1, 101, 101, 101, 101, 1, 1, 1, 1, 1, 1, 101, 101, 101, 101, 101, 3, 2, 1, 6, 101, 101, 101, 101, 101, 101, 15, 1, 1, 101, 101, 101, 101, 101, 101, 15, 2, 1, 1, 0, 3, 101, 101, 101, 
                        101, 3, 0, 1, 1, 2, 3, 101, 101, 101, 101, 101, 101, 5, 1, 15, 101, 101, 101, 101, 101, 101, 5, 1, 15, 101, 101, 101, 101, 101, 101, 101, 15, 1, 1, 5, 15, 101, 101, 101, 101, 101, 5, 1, 
                        1, 15, 101, 101, 101, 101, 101, 101, 101, 6, 1, 1, 101, 101, 101, 101, 101, 101, 2, 1, 6, 101, 101, 101, 101, 101, 101, 101, 3, 5, 1, 1, 101, 101, 101, 101, 101, 101, 3, 5, 5, 3, 101, 101, 
                        101, 101, 101, 101, 101, 0, 1, 2, 15, 101, 101, 101, 101, 101, 2, 1, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15, 101, 101, 101, 101, 101, 101, 101, 101, 15, 15, 101, 101, 101, 101, 
                        101, 101, 101, 101, 1, 1, 2, 15, 101, 101, 101, 101, 101, 2, 1, 0, 101, 101, 101, 101, 15, 15, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15, 101, 101,
                        101, 101, 1, 1, 2, 15, 101, 101, 101, 101, 101, 2, 1, 6, 101, 101, 101, 3, 2, 1, 15, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 5, 2, 3, 101, 101, 101, 0,
                        1, 2, 15, 101, 101, 101, 101, 101, 5, 1, 15, 101, 101, 101, 15, 1, 0, 3, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15, 2, 1, 5, 101, 101, 101, 6, 1, 1, 101, 101,
                        101, 101, 101, 101, 15, 1, 5, 101, 101, 1, 1, 1, 5, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15, 1, 1, 0, 101, 101, 5, 1, 5, 101, 101, 101, 101, 101, 
                        101, 0, 1, 2, 3, 15, 2, 1, 1, 1, 3, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15, 5, 1, 1, 2, 3, 101, 2, 1, 6, 101, 101, 101, 101, 101, 101, 3, 0, 1, 0, 3, 0, 2,
                        5, 1, 2, 1, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 3, 53, 1, 5, 2, 0, 1, 1, 1, 0, 3, 101, 101, 101, 101, 101, 101, 101, 5, 1, 1, 15, 3, 3, 3, 15, 1, 0, 15, 15, 101, 101,
                        101, 101, 101, 101, 101, 101, 101, 6, 53, 1, 15, 3, 3, 3, 15, 5, 1, 5, 15, 101, 101, 101, 101, 101, 101, 101, 1, 1, 1, 0, 101, 101, 101, 101, 6, 0, 1, 2, 6, 3, 101, 101, 101, 101, 15, 6, 53, 
                        39, 0, 15, 15, 101, 101, 101, 1, 1, 1, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 5, 1, 2, 3, 101, 101, 101, 101, 0, 2, 1, 1, 0, 1, 5, 15, 53, 53, 39, 1, 2, 6, 101, 101, 101, 101, 15, 2, 
                        1, 5, 15, 101, 101, 101, 101, 101, 101, 101, 101, 101, 3, 2, 1, 1, 15, 101, 101, 101, 101, 3, 5, 0, 1, 1, 1, 1, 1, 1, 1, 5, 1, 101, 101, 101, 101, 101, 5, 1, 0, 1, 101, 101, 101, 101, 101, 101,
                        101, 101, 101, 101, 101, 0, 0, 1, 5, 15, 101, 101, 101, 101, 101, 1, 15, 2, 2, 2, 2, 15, 1, 15, 101, 101, 101, 101, 101, 15, 1, 0, 6, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
                        101, 6, 1, 1, 5, 3, 101, 101, 101, 101, 101, 101, 3, 3, 3, 3, 101, 101, 101, 101, 101, 101, 15, 5, 1, 1, 15, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 6, 0, 1, 2,
                        1, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 1, 53, 1, 0, 15, 15, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 0, 2, 1, 1, 1, 1, 101,
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 1, 15, 39, 1, 0, 6, 15, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15, 3, 5, 1, 1, 1, 2, 5, 6, 0, 1, 1, 1, 6,
                        15, 53, 39, 1, 1, 5, 1, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15, 1, 5, 0, 1, 1, 1, 39, 39, 39, 39, 39, 1, 1, 0, 1, 0, 3, 101, 101,
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 3, 6, 5, 1, 2, 2, 2, 2, 1, 5, 6, 1, 15, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15, 3, 3, 3, 3, 15, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
                        101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101};
    
    

    Image im(40, 40);
    for(int i=0; i<40; i++){
        for(int k=0; k<40; k++){
            im.set(k, i, mas1[i*40 + k]);
        }
    }
    im.write_pgn("smile.pgn");

    Image im1("smile.pgn");
    im1.show();
}